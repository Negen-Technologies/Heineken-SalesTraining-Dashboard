{"ast":null,"code":"/** @format */\nimport axios from \"axios\";\nimport URLst, { handle401 } from \"../../utils/constants\";\nimport * as actionTypes from \"./allBadgesActionTypes\";\nexport const allbadgePending = () => {\n  return {\n    type: actionTypes.ALL_BADGE_PENDING,\n    isPending: true\n  };\n};\nexport const allbadgeSuccess = data => {\n  return {\n    type: actionTypes.ALL_BADGE_SUCCESS,\n    isPending: false,\n    data: data.results,\n    count: data.totalResults\n  };\n};\nexport const badgeCreateSuccess = data => {\n  return {\n    type: actionTypes.CREATE_BADGE_SUCCESS,\n    data: data\n  };\n};\nexport const updatebadgeSuccess = data => {\n  return {\n    type: actionTypes.UPDATE_BADGE_SUCCESS,\n    isPending: false,\n    data: data\n  };\n};\nexport const deletebadgeSuccess = data => {\n  return {\n    type: actionTypes.DELETE_BADGE_SUCCESS,\n    isPending: false,\n    data: data\n  };\n};\nexport const allbadgeFail = error => {\n  return {\n    type: actionTypes.ALL_BADGE_FAILED,\n    error: error,\n    isPending: false\n  };\n};\nexport const getAllBadgeSuccess = (limit, page) => {\n  var token = localStorage.getItem(\"token\");\n  return dispatch => {\n    dispatch(allbadgePending());\n    axios({\n      method: \"get\",\n      url: URLst + `v1/badges?limit=${limit}&page=${page}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(allbadgeSuccess(res.data));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(allbadgeFail(errorData));\n    });\n  };\n};\nexport const badgeCreate = formData => {\n  return dispatch => {\n    dispatch(allbadgePending());\n    console.log(formData);\n    const token = localStorage.getItem(\"token\");\n    axios.post(URLst + \"v1/badges\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(badgeCreateSuccess(res.data));\n    }).catch(err => {\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      var errorData;\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(allbadgeFail(errorData));\n    });\n  };\n};\nexport const AllBadgeEdit = (id, badges, edited) => {\n  const token = localStorage.getItem(\"token\");\n  return (dispatch, getState) => {\n    dispatch(allbadgePending());\n    axios({\n      method: \"patch\",\n      url: URLst + `v1/badges/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      data: edited\n    }).then(res => {\n      let newData = [...badges];\n      let index = newData.findIndex(av => av.id === res.data.id);\n      newData[index] = res.data;\n      dispatch(updatebadgeSuccess(newData));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(allbadgeFail(errorData));\n    });\n  };\n};\nexport const AllBadgeDelete = (id, badges) => {\n  var filtereddata = badges.filter(item => item.id !== id);\n  var token = localStorage.getItem(\"token\");\n  return dispatch => {\n    dispatch(allbadgePending());\n    axios({\n      method: \"delete\",\n      url: URLst + `v1/badges/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      dispatch(deletebadgeSuccess(filtereddata));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      dispatch(allbadgeFail(errorData));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/eyasu/Desktop/leanbits/Heineken-SalesTraining-Dashboard/store/Badges/allBadgesAction.js"],"names":["axios","URLst","handle401","actionTypes","allbadgePending","type","ALL_BADGE_PENDING","isPending","allbadgeSuccess","data","ALL_BADGE_SUCCESS","results","count","totalResults","badgeCreateSuccess","CREATE_BADGE_SUCCESS","updatebadgeSuccess","UPDATE_BADGE_SUCCESS","deletebadgeSuccess","DELETE_BADGE_SUCCESS","allbadgeFail","error","ALL_BADGE_FAILED","getAllBadgeSuccess","limit","page","token","localStorage","getItem","dispatch","method","url","headers","Authorization","then","res","console","log","catch","err","errorData","response","code","message","badgeCreate","formData","post","AllBadgeEdit","id","badges","edited","getState","newData","index","findIndex","av","AllBadgeDelete","filtereddata","filter","item"],"mappings":"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","sourcesContent":["/** @format */\n\nimport axios from \"axios\";\nimport URLst, { handle401 } from \"../../utils/constants\";\nimport * as actionTypes from \"./allBadgesActionTypes\";\n\nexport const allbadgePending = () => {\n  return {\n    type: actionTypes.ALL_BADGE_PENDING,\n    isPending: true,\n  };\n};\nexport const allbadgeSuccess = (data) => {\n  return {\n    type: actionTypes.ALL_BADGE_SUCCESS,\n    isPending: false,\n    data: data.results,\n    count: data.totalResults,\n  };\n};\n\nexport const badgeCreateSuccess = (data) => {\n  return {\n    type: actionTypes.CREATE_BADGE_SUCCESS,\n    data: data,\n  };\n};\n\nexport const updatebadgeSuccess = (data) => {\n  return {\n    type: actionTypes.UPDATE_BADGE_SUCCESS,\n    isPending: false,\n    data: data,\n  };\n};\n\nexport const deletebadgeSuccess = (data) => {\n  return {\n    type: actionTypes.DELETE_BADGE_SUCCESS,\n    isPending: false,\n    data: data,\n  };\n};\n\nexport const allbadgeFail = (error) => {\n  return {\n    type: actionTypes.ALL_BADGE_FAILED,\n    error: error,\n    isPending: false,\n  };\n};\n\nexport const getAllBadgeSuccess = (limit, page) => {\n  var token = localStorage.getItem(\"token\");\n  return (dispatch) => {\n    dispatch(allbadgePending());\n\n    axios({\n      method: \"get\",\n      url: URLst + `v1/badges?limit=${limit}&page=${page}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((res) => {\n        console.log(res.data);\n        dispatch(allbadgeSuccess(res.data));\n      })\n      .catch((err) => {\n        var errorData;\n        if (err.response.data.code == 401) {\n          handle401();\n        }\n        if (err.response != null) {\n          errorData = err.response.data.message;\n        } else {\n          errorData = err.message;\n        }\n        console.log(errorData);\n        dispatch(allbadgeFail(errorData));\n      });\n  };\n};\n\nexport const badgeCreate = (formData) => {\n  return (dispatch) => {\n    dispatch(allbadgePending());\n    console.log(formData);\n    const token = localStorage.getItem(\"token\");\n    axios\n      .post(URLst + \"v1/badges\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((res) => {\n        console.log(res.data);\n\n        dispatch(badgeCreateSuccess(res.data));\n      })\n      .catch((err) => {\n        if (err.response.data.code == 401) {\n          handle401();\n        }\n\n        var errorData;\n        if (err.response != null) {\n          errorData = err.response.data.message;\n        } else {\n          errorData = err.message;\n        }\n        console.log(errorData);\n        dispatch(allbadgeFail(errorData));\n      });\n  };\n};\n\nexport const AllBadgeEdit = (id, badges, edited) => {\n  const token = localStorage.getItem(\"token\");\n\n  return (dispatch, getState) => {\n    dispatch(allbadgePending());\n\n    axios({\n      method: \"patch\",\n      url: URLst + `v1/badges/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      data: edited,\n    })\n      .then((res) => {\n        let newData = [...badges];\n        let index = newData.findIndex((av) => av.id === res.data.id);\n\n        newData[index] = res.data;\n\n        dispatch(updatebadgeSuccess(newData));\n      })\n      .catch((err) => {\n        var errorData;\n        if (err.response.data.code == 401) {\n          handle401();\n        }\n        if (err.response != null) {\n          errorData = err.response.data.message;\n        } else {\n          errorData = err.message;\n        }\n        console.log(errorData);\n        dispatch(allbadgeFail(errorData));\n      });\n  };\n};\n\nexport const AllBadgeDelete = (id, badges) => {\n  var filtereddata = badges.filter((item) => item.id !== id);\n  var token = localStorage.getItem(\"token\");\n  return (dispatch) => {\n    dispatch(allbadgePending());\n\n    axios({\n      method: \"delete\",\n      url: URLst + `v1/badges/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((res) => {\n        dispatch(deletebadgeSuccess(filtereddata));\n      })\n      .catch((err) => {\n        var errorData;\n        if (err.response.data.code == 401) {\n          handle401();\n        }\n        if (err.response != null) {\n          errorData = err.response.data.message;\n        } else {\n          errorData = err.message;\n        }\n        dispatch(allbadgeFail(errorData));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}