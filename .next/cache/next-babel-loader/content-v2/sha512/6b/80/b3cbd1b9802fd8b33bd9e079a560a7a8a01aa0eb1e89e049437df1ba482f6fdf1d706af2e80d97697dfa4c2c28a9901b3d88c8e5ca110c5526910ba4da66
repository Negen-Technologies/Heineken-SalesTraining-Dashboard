{"ast":null,"code":"import axios from \"axios\";\nimport URLst, { handle401 } from \"../../utils/constants\";\nimport * as actionTypes from \"./courseActionTypes\";\nexport const allcoursePending = () => {\n  return {\n    type: actionTypes.COURSE_PENDING,\n    isPending: true\n  };\n};\nexport const allcourseSuccess = data => {\n  return {\n    type: actionTypes.COURSE_SUCCESS,\n    isPending: false,\n    data: data.results,\n    count: data.totalResults\n  };\n};\nexport const courseCreateSuccess = data => {\n  return {\n    type: actionTypes.CREATE_COURSE_SUCCESS,\n    data: data\n  };\n};\nexport const updateCourseSuccess = data => {\n  return {\n    type: actionTypes.UPDATE_COURSE_SUCCESS,\n    isPending: false,\n    data: data\n  };\n};\nexport const deleteCourseSuccess = data => {\n  return {\n    type: actionTypes.DELETE_COURSE_SUCCESS,\n    isPending: false,\n    data: data\n  };\n};\nexport const allcourseFail = error => {\n  return {\n    type: actionTypes.COURSE_FAILED,\n    error: error,\n    isPending: false\n  };\n};\nexport const getAllCourseSuccess = (limit, page) => {\n  var token = localStorage.getItem(\"token\");\n  return dispatch => {\n    dispatch(allcoursePending());\n    axios({\n      method: \"get\",\n      url: URLst + `v1/courses?limit=${limit}&page=${page}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(allcourseSuccess(res.data));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(allcourseFail(errorData));\n    });\n  };\n};\nexport const getSingleCourseSuccess = id => {\n  var token = localStorage.getItem(\"token\");\n  return dispatch => {\n    dispatch(allcoursePending());\n    axios({\n      method: \"get\",\n      url: URLst + `v1/courses/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(allcourseSuccess({\n        results: [res.data],\n        totalResults: 1\n      }));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(allcourseFail(errorData));\n    });\n  };\n};\nexport const courseCreate = formData => {\n  return dispatch => {\n    dispatch(allcoursePending());\n    const token = localStorage.getItem(\"token\");\n    axios.post(URLst + \"v1/courses\", {\n      name: formData.name\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(courseCreateSuccess(res.data));\n    }).catch(err => {\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      var errorData;\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(allcourseFail(errorData));\n    });\n  };\n};\nexport const AllCourseEdit = (id, courses, edited) => {\n  const token = localStorage.getItem(\"token\");\n  return (dispatch, getState) => {\n    dispatch(allcoursePending());\n    axios({\n      method: \"patch\",\n      url: URLst + `v1/courses/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      data: edited\n    }).then(res => {\n      let newData = [...courses];\n      let index = newData.findIndex(av => av.id === res.data.id);\n      newData[index] = res.data;\n      dispatch(updateCourseSuccess(newData));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(allcourseFail(errorData));\n    });\n  };\n};\nexport const AllCourseDelete = (id, courses) => {\n  var filtereddata = courses.filter(item => item.id !== id);\n  var token = localStorage.getItem(\"token\");\n  return dispatch => {\n    dispatch(allcoursePending());\n    axios({\n      method: \"delete\",\n      url: URLst + `v1/courses/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      dispatch(deleteCourseSuccess(filtereddata));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      dispatch(allcourseFail(errorData));\n    });\n  };\n};\nexport const AddModuleToCourse = async (courseid, moduleid) => {\n  const token = localStorage.getItem(\"token\");\n  axios({\n    method: \"patch\",\n    url: URLst + `v1/courses/${courseid}`,\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    data: [...modules, moduleid]\n  }).then(res => {\n    console.log(res.data);\n    return 200;\n  }).catch(err => {\n    console.log(err.response.data.message);\n    return 400;\n  });\n};","map":null,"metadata":{},"sourceType":"module"}