{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getAllRegionSuccess, regionCreate, AllRegionEdit, AllRegionDelete } from \"../store\";\nimport withAuth from \"../utils/protectRoute\";\nimport URLst, { primary_color } from \"../utils/constants\";\n\nconst EditableCell = (_ref) => {\n  let {\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    record,\n    index,\n    children\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n  const inputNode = dataIndex === \"role\" ? /*#__PURE__*/_jsx(_Input, {\n    disabled: true\n  }) : /*#__PURE__*/_jsx(_Input, {});\n  return /*#__PURE__*/_jsx(\"td\", _objectSpread(_objectSpread({}, restProps), {}, {\n    children: editing ? /*#__PURE__*/_jsx(_Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      children: inputNode\n    }) : children\n  }));\n};\n\nconst Regions = props => {\n  const [form] = _Form.useForm();\n\n  var numEachPage = 10;\n  var data = [];\n  const {\n    0: isVisible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: current,\n    1: setCurrent\n  } = useState(1);\n  const {\n    0: loadedpage,\n    1: setLoadedPage\n  } = useState([1]);\n  props.regions.forEach(element => {\n    data.push(_objectSpread(_objectSpread({}, element), {}, {\n      key: element.id\n    }));\n  });\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState(\"\");\n  useEffect(() => {\n    props.getAllRegionSuccess(numEachPage, 1);\n  }, []);\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue(_objectSpread({}, record));\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  }; //*********** Editing function ***********//\n\n\n  const save = async key => {\n    const row = await form.validateFields();\n    setEditingKey(\"\");\n    props.AllRegionEdit(key, props.regions, row);\n  }; //*********** Deleting function ***********//\n\n\n  const handleDelete = key => {\n    props.AllRegionDelete(key, props.regions);\n  };\n\n  const handleChange = (pageNumber, size) => {\n    numEachPage = size;\n    setCurrent(pageNumber);\n    props.getAllRegionSuccess(numEachPage, pageNumber);\n    setLoadedPage([...loadedpage, pageNumber]);\n  };\n\n  const columns = [{\n    title: \"Name\",\n    dataIndex: \"name\",\n    editable: true\n  }, {\n    title: \"\",\n    dataIndex: \"\",\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/_jsxs(\"span\", {\n        children: [/*#__PURE__*/_jsx(_Popconfirm, {\n          title: \"Sure to save?\",\n          onConfirm: () => save(record.key),\n          children: /*#__PURE__*/_jsx(_Button, {\n            type: \"link\",\n            style: {\n              marginRight: 8\n            },\n            children: \"Save\"\n          })\n        }), /*#__PURE__*/_jsx(_Button, {\n          type: \"link\",\n          onClick: cancel,\n          children: \"Cancel\"\n        })]\n      }) : /*#__PURE__*/_jsx(_Typography.Link, {\n        disabled: editingKey !== \"\",\n        onClick: () => edit(record),\n        children: \"Edit\"\n      });\n    }\n  }, {\n    title: \"\",\n    dataIndex: \"\",\n    render: (_, record) => /*#__PURE__*/_jsx(_Popconfirm, {\n      title: \"Sure to delete?\",\n      onConfirm: () => {\n        handleDelete(record.key);\n      },\n      children: /*#__PURE__*/_jsx(\"a\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"Delete\"\n      })\n    })\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    });\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsxs(_Row, {\n      children: [/*#__PURE__*/_jsxs(_Col, {\n        span: 18,\n        xs: 24,\n        sm: 24,\n        md: 18,\n        lg: 18,\n        xl: 18,\n        xxl: 18,\n        style: {\n          padding: \"0px 50px\"\n        },\n        children: [/*#__PURE__*/_jsx(\"h1\", {\n          style: {\n            fontSize: 20,\n            fontWeight: 600,\n            color: primary_color\n          },\n          children: \"All Regions\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: \"auto\",\n            backgroundColor: primary_color,\n            height: \"2px\",\n            marginBottom: \"20px\"\n          }\n        }), \" \", /*#__PURE__*/_jsx(_Form, {\n          form: form,\n          component: false,\n          children: /*#__PURE__*/_jsx(_Table, {\n            components: {\n              body: {\n                cell: EditableCell\n              }\n            },\n            style: {// paddingTop: 20,\n            },\n            scroll: {\n              x: 200\n            },\n            bordered: true,\n            loading: props.regionsPending,\n            dataSource: data,\n            columns: mergedColumns,\n            rowClassName: \"editable-row\",\n            pagination: {\n              defaultCurrent: 1,\n              total: props.count,\n              onChange: handleChange,\n              defaultPageSize: numEachPage,\n              current: current,\n              responsive: true,\n              // showSizeChanger: true,\n              hideOnSinglePage: true,\n              pageSizeOptions: [\"10\", \"20\", \"50\", \"100\"]\n            }\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(_Col, {\n        span: 6,\n        xs: 24,\n        sm: 24,\n        md: 6,\n        lg: 6,\n        xl: 6,\n        xxl: 6,\n        children: [/*#__PURE__*/_jsx(\"h1\", {\n          style: {\n            fontSize: 20,\n            fontWeight: 600,\n            color: primary_color\n          },\n          children: \"Actions\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: \"auto\",\n            backgroundColor: primary_color,\n            height: \"2px\"\n          }\n        }), /*#__PURE__*/_jsx(_Button, {\n          style: {\n            width: \"202px\",\n            margin: \"20px 0px\"\n          },\n          type: \"primary\",\n          onClick: () => {\n            form.resetFields();\n            setVisible(true);\n          },\n          children: \"Add Region\"\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(_Modal, {\n      title: \"Region\",\n      visible: isVisible,\n      closable: true,\n      okButtonProps: {\n        style: {\n          display: \"none\"\n        }\n      },\n      cancelButtonProps: {\n        style: {\n          display: \"none\"\n        }\n      },\n      onCancel: () => {\n        setVisible(false);\n      },\n      children: /*#__PURE__*/_jsxs(_Form, {\n        form: form,\n        onFinish: doc => {\n          props.regionCreate(doc);\n        },\n        children: [/*#__PURE__*/_jsx(_Form.Item, {\n          name: \"name\",\n          children: /*#__PURE__*/_jsx(_Input, {\n            placeholder: \"Name\"\n          })\n        }), /*#__PURE__*/_jsx(_Form.Item, {\n          children: /*#__PURE__*/_jsx(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: props.regionsError\n          })\n        }), /*#__PURE__*/_jsx(_Form.Item, {\n          style: {\n            textAlign: \"right\"\n          },\n          children: /*#__PURE__*/_jsx(_Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            loading: props.regionsPending,\n            children: \"Submit\"\n          })\n        })]\n      })\n    })]\n  });\n};\n\nconst mapStateToProps = state => {\n  return {\n    regions: state.allregions.allregions,\n    count: state.allregions.count,\n    regionsPending: state.allregions.loading,\n    regionsError: state.allregions.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAllRegionSuccess: (limit, page) => dispatch(getAllRegionSuccess(limit, page)),\n    AllRegionEdit: (id, regions, edited) => dispatch(AllRegionEdit(id, regions, edited)),\n    AllRegionDelete: (id, regions) => dispatch(AllRegionDelete(id, regions)),\n    regionCreate: formData => dispatch(regionCreate(formData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withAuth(Regions));","map":null,"metadata":{},"sourceType":"module"}