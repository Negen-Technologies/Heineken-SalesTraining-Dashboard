{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as avatarTypes from \"./avatar_actionTypes\";\nconst initialState = {\n  error: null,\n  loading: false,\n  data: []\n};\n\nconst avatarStart = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    error: null,\n    loading: true\n  });\n};\n\nconst avatarCreateSuccess = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    data: [...state.data, action.data],\n    error: null,\n    loading: false\n  });\n};\n\nconst avatarGetSuccess = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    data: action.data,\n    error: null,\n    loading: false\n  });\n};\n\nconst avatarEditSuccess = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    data: action.data,\n    error: null,\n    loading: false\n  });\n};\n\nconst avatarDeleteSuccess = (state, action) => {\n  const newUsers = state.data.filter(user => {\n    return user.id !== action.data.id;\n  });\n  return _objectSpread(_objectSpread({}, state), {}, {\n    data: action.data,\n    error: null,\n    loading: false\n  });\n};\n\nconst avatarFail = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    error: action.error,\n    loading: false\n  });\n};\n\nconst avatar_reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case avatarTypes.AVATAR_START:\n      return avatarStart(state, action);\n\n    case avatarTypes.AVATAR_CREATE_SUCCESS:\n      return avatarCreateSuccess(state, action);\n\n    case avatarTypes.AVATAR_GET_SUCCESS:\n      return avatarGetSuccess(state, action);\n\n    case avatarTypes.AVATAR_EDIT_SUCCESS:\n      return avatarEditSuccess(state, action);\n\n    case avatarTypes.AVATAR_DELETE_SUCCESS:\n      return avatarDeleteSuccess(state, action);\n\n    case avatarTypes.AVATAR_FAIL:\n      return avatarFail(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default avatar_reducer;","map":null,"metadata":{},"sourceType":"module"}