{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from \"./regionActionTypes\";\nconst initialState = {\n  error: null,\n  loading: false,\n  allregions: [],\n  count: 0\n};\n\nconst allregionsStart = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    error: null,\n    loading: true\n  });\n};\n\nconst allregionsSuccess = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    allregions: action.data,\n    error: null,\n    loading: false,\n    count: action.count\n  });\n};\n\nconst allregionsFail = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    error: action.error,\n    loading: false\n  });\n};\n\nconst createRegionSuccess = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    allregions: [...state.allregions, action.data],\n    error: null,\n    loading: false\n  });\n};\n\nconst updateRegionSuccess = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    allregions: action.data,\n    error: null,\n    loading: false\n  });\n};\n\nconst deleteRegionSuccess = (state, action) => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    allregions: action.data,\n    error: null,\n    loading: false\n  });\n};\n\nconst allregionsreducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.REGION_PENDING:\n      return allregionsStart(state, action);\n\n    case actionTypes.REGION_SUCCESS:\n      return allregionsSuccess(state, action);\n\n    case actionTypes.REGION_FAILED:\n      return allregionsFail(state, action);\n\n    case actionTypes.CREATE_REGION_SUCCESS:\n      return createRegionSuccess(state, action);\n\n    case actionTypes.UPDATE_REGION_SUCCESS:\n      return updateRegionSuccess(state, action);\n\n    case actionTypes.DELETE_REGION_SUCCESS:\n      return deleteRegionSuccess(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default allregionsreducer;","map":null,"metadata":{},"sourceType":"module"}