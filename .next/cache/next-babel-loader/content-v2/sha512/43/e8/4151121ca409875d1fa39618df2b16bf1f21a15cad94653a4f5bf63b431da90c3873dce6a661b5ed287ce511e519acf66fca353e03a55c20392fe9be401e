{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _slicedToArray from \"D:/Work/Hieniken project/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\n\n/** @format */\nimport React, { useState, useEffect } from \"react\";\nimport { primary_color } from \"../utils/constants\";\nimport withAuth from \"../utils/protectRoute\";\nimport { connect } from \"react-redux\";\nimport { avatarCreate as _avatarCreate, avatarGet as _avatarGet, avatarEdit as _avatarEdit, avatarDelete as _avatarDelete } from \"../store/index\";\nimport FormData from \"form-data\";\nimport { LoadingOutlined, EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\nvar Meta = _Card.Meta;\n\nfunction Avatar(_ref) {\n  var data = _ref.data,\n      avatarCreate = _ref.avatarCreate,\n      avatarGet = _ref.avatarGet,\n      avatarEdit = _ref.avatarEdit,\n      avatarDelete = _ref.avatarDelete,\n      loading = _ref.loading;\n  var formData = new FormData();\n\n  var _useState = useState(false),\n      isVisible = _useState[0],\n      setVisible = _useState[1];\n\n  var _useState2 = useState(false),\n      isEditing = _useState2[0],\n      setEditing = _useState2[1];\n\n  var _useState3 = useState(null),\n      editingkey = _useState3[0],\n      seteditingkey = _useState3[1];\n\n  var _Form$useForm = _Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  useEffect(function () {\n    avatarGet();\n  }, []);\n\n  var onFill = function onFill(e) {\n    form.setFieldsValue({\n      name: e.name,\n      description: e.description\n    });\n  };\n\n  var finalCard = data.map(function (ele) {\n    return /*#__PURE__*/_jsxs(_Col, {\n      span: 8,\n      xs: 24,\n      sm: 24,\n      md: 24,\n      lg: 12,\n      xl: 8,\n      xxl: 8,\n      children: [\" \", /*#__PURE__*/_jsx(_Card, {\n        style: {\n          width: 250\n        },\n        cover: /*#__PURE__*/_jsx(\"img\", {\n          alt: \"example\",\n          src: \"https://api.seleda.hahu.one/images/\".concat(ele.image)\n        }),\n        actions: [/*#__PURE__*/_jsx(EditOutlined, {\n          onClick: function onClick() {\n            form.resetFields();\n            seteditingkey(ele.id);\n            setEditing(true);\n            onFill(ele);\n            setVisible(true);\n          }\n        }, \"edit\"), /*#__PURE__*/_jsx(_Popconfirm, {\n          title: \"Are you sure to delete this task?\",\n          onConfirm: function onConfirm() {\n            avatarDelete(ele.id, data);\n          },\n          okText: \"Yes\",\n          cancelText: \"No\",\n          children: /*#__PURE__*/_jsx(DeleteOutlined, {}, \"setting\")\n        }) // <DeleteOutlined key=\"setting\" onClick={()=>{avatarDelete(ele.id,data);}}/>,\n        ],\n        children: /*#__PURE__*/_jsx(Meta //   avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" />}\n        , {\n          title: ele.name,\n          description: ele.description\n        })\n      })]\n    }, ele.id);\n  });\n\n  var handleCancel = function handleCancel() {\n    setVisible(false);\n    setEditing(false);\n    seteditingkey(null);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100 vw\",\n      overflow: \"auto\"\n    },\n    children: [data.length == 0 ? /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        height: \"100vh\",\n        width: \"100 vw\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: [\" \", /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(LoadingOutlined, {\n          style: {\n            fontSize: 80\n          }\n        })\n      })]\n    }) : /*#__PURE__*/_jsxs(_Row, {\n      children: [/*#__PURE__*/_jsxs(_Col, {\n        span: 18,\n        style: {\n          padding: \"0px 50px\"\n        },\n        children: [/*#__PURE__*/_jsx(\"h1\", {\n          style: {\n            fontSize: 20,\n            fontWeight: 600,\n            color: primary_color\n          },\n          children: \"All Avatars\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: \"auto\",\n            backgroundColor: primary_color,\n            height: \"2px\",\n            marginBottom: \"20px\"\n          }\n        }), /*#__PURE__*/_jsxs(_Row, {\n          gutter: [2, 16],\n          children: [\" \", finalCard]\n        })]\n      }), /*#__PURE__*/_jsxs(_Col, {\n        span: 6,\n        xs: 24,\n        sm: 24,\n        md: 6,\n        lg: 6,\n        xl: 6,\n        xxl: 6,\n        children: [/*#__PURE__*/_jsx(\"h1\", {\n          style: {\n            fontSize: 20,\n            fontWeight: 600,\n            color: primary_color\n          },\n          children: \"Actions\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: \"auto\",\n            backgroundColor: primary_color,\n            height: \"2px\"\n          }\n        }), /*#__PURE__*/_jsx(_Button, {\n          style: {\n            width: \"202px\",\n            margin: \"20px 0px\"\n          },\n          type: \"primary\",\n          onClick: function onClick() {\n            form.resetFields();\n            setVisible(true);\n          },\n          children: \"Add Avatar\"\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(_Modal, {\n      title: \"Avatar\",\n      visible: isVisible,\n      closable: true,\n      okButtonProps: {\n        style: {\n          display: \"none\"\n        }\n      },\n      cancelButtonProps: {\n        style: {\n          display: \"none\"\n        }\n      },\n      onCancel: handleCancel,\n      children: /*#__PURE__*/_jsxs(_Form, {\n        form: form,\n        onFinish: function onFinish(doc) {\n          //   console.log(doc);\n          formData.append(\"name\", doc.name);\n          formData.append(\"description\", doc.description);\n\n          if (isEditing) {\n            avatarEdit(doc, editingkey);\n          } else {\n            avatarCreate(formData);\n          }\n        },\n        children: [/*#__PURE__*/_jsx(_Form.Item, {\n          name: \"name\",\n          children: /*#__PURE__*/_jsx(_Input, {\n            placeholder: \"Name\"\n          })\n        }), /*#__PURE__*/_jsx(_Form.Item, {\n          name: \"description\",\n          children: /*#__PURE__*/_jsx(_Input, {\n            placeholder: \"Description\"\n          })\n        }), /*#__PURE__*/_jsx(_Form.Item, {\n          children: /*#__PURE__*/_jsx(_Input, {\n            disabled: isEditing,\n            placeholder: \"image\",\n            type: \"file\",\n            onChange: function onChange(e) {\n              formData.append(\"image\", e.target.files[0]);\n            }\n          })\n        }), /*#__PURE__*/_jsx(_Form.Item, {\n          style: {\n            textAlign: \"right\"\n          },\n          children: /*#__PURE__*/_jsx(_Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            loading: loading,\n            children: \"Submit\"\n          })\n        })]\n      })\n    })]\n  });\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    data: state.avatar_reducer.data,\n    loading: state.avatar_reducer.loading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    avatarCreate: function avatarCreate(value) {\n      return dispatch(_avatarCreate(value));\n    },\n    avatarGet: function avatarGet() {\n      return dispatch(_avatarGet());\n    },\n    avatarEdit: function avatarEdit(value, id) {\n      return dispatch(_avatarEdit(value, id));\n    },\n    avatarDelete: function avatarDelete(id, data) {\n      return dispatch(_avatarDelete(id, data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withAuth(Avatar));","map":null,"metadata":{},"sourceType":"module"}