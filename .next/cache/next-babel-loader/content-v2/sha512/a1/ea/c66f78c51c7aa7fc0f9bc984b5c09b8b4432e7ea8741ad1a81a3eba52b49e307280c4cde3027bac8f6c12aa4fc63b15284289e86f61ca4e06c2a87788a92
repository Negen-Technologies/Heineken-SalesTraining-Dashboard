{"ast":null,"code":"import axios from \"axios\";\nimport * as actionTypes from \"./avatar_actionTypes\";\nimport URLst, { handle401 } from \"../../utils/constants\"; // import handle401 from \"../../utils/constants\"\n\nexport const avatarStart = () => {\n  return {\n    type: actionTypes.AVATAR_START\n  };\n};\nexport const avatarCreateSuccess = data => {\n  return {\n    type: actionTypes.AVATAR_CREATE_SUCCESS,\n    data: data\n  };\n};\nexport const avatarGetSuccess = data => {\n  return {\n    type: actionTypes.AVATAR_GET_SUCCESS,\n    data: data\n  };\n};\nexport const avatarEditSuccess = data => {\n  return {\n    type: actionTypes.AVATAR_EDIT_SUCCESS,\n    data: data\n  };\n};\nexport const avatarDeleteSuccess = data => {\n  return {\n    type: actionTypes.AVATAR_DELETE_SUCCESS,\n    data: data\n  };\n}; // AVATAR_DELETE_SUCCESS\n\nexport const avatarFail = error => {\n  return {\n    type: actionTypes.AVATAR_FAIL,\n    error: error\n  };\n};\nexport const avatarEdit = (formData, id) => {\n  const token = localStorage.getItem(\"token\");\n  return (dispatch, getState) => {\n    const {\n      data\n    } = getState().avatar_reducer;\n    dispatch(avatarStart());\n    axios.patch(URLst + `v1/avatars/${id}`, formData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      let newData = [...data];\n      let index = newData.findIndex(av => av.id === res.data.id);\n      newData[index] = res.data;\n      dispatch(avatarEditSuccess(newData));\n    }).catch(err => {\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      let errorData;\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      dispatch(avatarFail(errorData));\n    });\n  };\n};\nexport const avatarCreate = formData => {\n  return dispatch => {\n    dispatch(avatarStart());\n    const token = localStorage.getItem(\"token\");\n    axios.post(URLst + \"v1/avatars\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(avatarCreateSuccess(res.data));\n    }).catch(err => {\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      var errorData;\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      dispatch(avatarFail(errorData));\n    });\n  };\n};\nexport const avatarGet = () => {\n  return dispatch => {\n    dispatch(avatarStart());\n    const token = localStorage.getItem(\"token\");\n    axios.get(URLst + \"v1/avatars\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(avatarGetSuccess(res.data.results));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      dispatch(avatarFail(errorData));\n    });\n  };\n};\nexport const avatarDelete = (id, users) => {\n  var filtereddata = users.filter(item => item.id !== id);\n  var token = localStorage.getItem(\"token\");\n  return dispatch => {\n    dispatch(avatarStart());\n    axios({\n      method: \"delete\",\n      url: URLst + `v1/avatars/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res);\n      dispatch(avatarDeleteSuccess(filtereddata));\n    }).catch(err => {\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      var errorData;\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      dispatch(avatarFail(errorData));\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}