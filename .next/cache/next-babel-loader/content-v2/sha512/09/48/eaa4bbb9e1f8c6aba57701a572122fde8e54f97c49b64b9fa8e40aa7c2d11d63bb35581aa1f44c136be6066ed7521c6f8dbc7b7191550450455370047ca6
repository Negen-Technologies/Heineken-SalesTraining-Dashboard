{"ast":null,"code":"import axios from \"axios\";\nimport URLst, { handle401 } from \"../../utils/constants\";\nimport * as actionTypes from \"./allUsersActionTypes\";\nexport const alluserPending = () => {\n  return {\n    type: actionTypes.ALL_USER_PENDING,\n    isPending: true\n  };\n};\nexport const alluserSuccess = data => {\n  return {\n    type: actionTypes.ALL_USER_SUCCESS,\n    isPending: false,\n    data: data.results,\n    count: data.totalResults\n  };\n};\nexport const userCreateSuccess = data => {\n  return {\n    type: actionTypes.CREATE_USER_SUCCESS,\n    data: data\n  };\n};\nexport const updateUserSuccess = data => {\n  return {\n    type: actionTypes.UPDATE_USER_SUCCESS,\n    isPending: false,\n    data: data\n  };\n};\nexport const deleteUserSuccess = data => {\n  return {\n    type: actionTypes.DELETE_USER_SUCCESS,\n    isPending: false,\n    data: data\n  };\n};\nexport const alluserFail = error => {\n  return {\n    type: actionTypes.ALL_USER_FAILED,\n    error: error,\n    isPending: false\n  };\n};\nexport const getAllUserSuccess = (limit, page) => {\n  var token = localStorage.getItem(\"token\");\n  return dispatch => {\n    dispatch(alluserPending());\n    axios({\n      method: \"get\",\n      url: URLst + `v1/users?limit=${limit}&page=${page}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(alluserSuccess(res.data));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(alluserFail(errorData));\n    });\n  };\n};\nexport const UserCreate = formData => {\n  return dispatch => {\n    dispatch(alluserPending());\n    const token = localStorage.getItem(\"token\");\n    axios.post(URLst + \"v1/users\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(userCreateSuccess(res.data));\n    }).catch(err => {\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      var errorData;\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(alluserFail(errorData));\n    });\n  };\n};\nexport const AllUserEdit = (id, users, edited) => {\n  const token = localStorage.getItem(\"token\");\n  return (dispatch, getState) => {\n    dispatch(alluserPending());\n    delete edited.role;\n    delete edited.username;\n    axios({\n      method: \"patch\",\n      url: URLst + `v1/users/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      data: edited\n    }).then(res => {\n      let newData = [...users];\n      let index = newData.findIndex(av => av.id === res.data.id);\n      newData[index] = res.data;\n      dispatch(updateUserSuccess(newData));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      console.log(errorData);\n      dispatch(alluserFail(errorData));\n    });\n  };\n};\nexport const AllUserDelete = (id, users) => {\n  var filtereddata = users.filter(item => item.id !== id);\n  var token = localStorage.getItem(\"token\");\n  return dispatch => {\n    dispatch(alluserPending());\n    axios({\n      method: \"delete\",\n      url: URLst + `v1/users/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      dispatch(deleteUserSuccess(filtereddata));\n    }).catch(err => {\n      var errorData;\n\n      if (err.response.data.code == 401) {\n        handle401();\n      }\n\n      if (err.response != null) {\n        errorData = err.response.data.message;\n      } else {\n        errorData = err.message;\n      }\n\n      dispatch(alluserFail(errorData));\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}